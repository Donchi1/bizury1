import { Sparkles } from "lucide-react";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "./ui/form";
import { Input } from "./ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Button } from "./ui/button";
import { Textarea } from "./ui/textarea";
import { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import { descriptionTemplates, storeTypes } from "@/lib/mock-data"
import { supabase } from "@/lib/supabase";
import { useAuthStore } from "@/lib/store/auth";
import { useSellingStore } from "@/lib/store/sellingStore";
import { Store } from "@/lib/types";
import { ButtonLoading } from "./ui/loading";

const merchantSchema = z.object({
    applicationType: z.enum(["merchant", "supplier"], { required_error: "Select application type" }),
    classification: z.string().min(2, "Classification required"),
    storeName: z.string().min(2, "Store name required"),
    storeLogo: z.any().refine((file) => file instanceof FileList && file.length === 1, "Store logo required"),
    storeBanner: z.any().refine((file) => file instanceof FileList && file.length === 1, "Store banner required"),
    contactPerson: z.string().min(2, "Contact person required"),
    phone: z.string().min(8, "Phone number required"),
    idNumber: z.string().min(4, "ID number required"),
    idPhotoFront: z.any().refine((file) => file instanceof FileList && file.length === 1, "Front ID photo required"),
    idPhotoBack: z.any().refine((file) => file instanceof FileList && file.length === 1, "Back ID photo required"),
    invitationCode: z.string().optional(),
    address: z.string().min(2, "Address required"),
    description: z.string().min(2, "Description required"),
})

type MerchantFormValues = z.infer<typeof merchantSchema>

interface MerchantFormProps {
    onSuccess?: () => void
    loading: boolean
    createStore: (store: Omit<Store, "id">) => Promise<Store | void>
}

export default function MerchantForm({ onSuccess, loading, createStore }: MerchantFormProps) {

    const {user, profile} = useAuthStore()
    const [storeLogoPreview, setStoreLogoPreview] = useState<string | null>(null)
    const [idPhotoFrontPreview, setIdPhotoFrontPreview] = useState<string | null>(null)
    const [idPhotoBackPreview, setIdPhotoBackPreview] = useState<string | null>(null)
    const [storeBannerPreview, setStoreBannerPreview] = useState<string | null>(null)

    const form = useForm<MerchantFormValues>({
        resolver: zodResolver(merchantSchema),
        defaultValues: {
            applicationType: undefined,
            classification: "",
            storeName: "",
            storeLogo: undefined,
            storeBanner: undefined,
            contactPerson: "",
            phone: "",
            idNumber: "",
            idPhotoFront: undefined,
            idPhotoBack: undefined,
            invitationCode: "",
            address: "",
            description: "",
        },
    })

    // --- Move descriptionTemplates and handler here so they can access form ---

    const handleAutoGenerateDescription = () => {
        const classification = form.getValues("classification")?.toLowerCase() || "all"
        const templates = descriptionTemplates[classification] || descriptionTemplates["all"]
        const random = templates[Math.floor(Math.random() * templates.length)]
        form.setValue("description", random)
        toast.success("AI-generated description added!", {
            description: "This description was generated based on your store classification.",
        })
    }

       // File input handlers for preview
       const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, setPreview: (url: string) => void, fieldOnChange: (files: FileList | undefined) => void) => {
        const files = e.target.files
        if (files && files[0]) {
            const url = URL.createObjectURL(files[0])
            setPreview(url)
            fieldOnChange(files)
        }
    }

    const onSubmit = async (values: MerchantFormValues) => {
        if (!user?.id) return;
        try {
            // Upload images to Supabase Storage
            const logoFile = values.storeLogo[0]
            const bannerFile = values.storeBanner[0]
            const idFrontFile = values.idPhotoFront[0]
            const idBackFile = values.idPhotoBack[0]
            const [logoUrl, bannerUrl, idFrontUrl, idBackUrl] = await Promise.all([
                uploadToStorage(logoFile, `logo`, user.id),
                uploadToStorage(bannerFile, `banner`, user.id),
                uploadToStorage(idFrontFile, `id-front-${user.id}`, user.id),
                uploadToStorage(idBackFile, `id-back-${user.id}`, user.id),
            ])
            await createStore({
                owner_id: user.id,
                name: values.storeName,
                slug: values.storeName.toLowerCase().replace(/\s+/g, "-"),
                description: values.description,
                category: values.classification,
                logo_url: logoUrl,
                banner_url: bannerUrl,
                id_photo_front_url: idFrontUrl,
                id_photo_back_url: idBackUrl,
                address: values.address,
                phone: values.phone,
                is_verified: false,
                is_active: false,
                rating: 0,
                country: profile?.country || "",
                total_sales: 0,
                total_revenue: 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                email: profile?.email,
                status: "pending",
            })
           
            toast.success("Application Submitted", {
                description: "Your merchant application has been submitted and is under review.",
            })
            onSuccess?.()
        } catch (error: any) {
            toast.error("Submission Failed", {
                description: error?.message || "Failed to submit application. Please try again.",
            })
        }
    }

    const uploadToStorage = async (file: File, pathPrefix: string, userId: string) => {
        const fileExt = file.name.split('.').pop()
        const fileName = `${pathPrefix}-${userId}.${fileExt}`
        const { data, error } = await supabase
            .storage
            .from("store-assets")
            .upload(fileName, file, { upsert: true }) // always replace
        if (error) throw error
        const { data: publicUrlData } = supabase.storage.from("store-assets").getPublicUrl(fileName)
        return publicUrlData.publicUrl
    }


    return (
        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                        control={form.control}
                        name="applicationType"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Application Type</FormLabel>
                                <Select onValueChange={field.onChange} value={field.value}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select type" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                        <SelectItem value="merchant">Merchant</SelectItem>
                                        <SelectItem value="supplier">Supplier</SelectItem>
                                    </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="classification"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Merchant Classification</FormLabel>
                                <Select onValueChange={field.onChange} value={field.value}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select classification" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                        {storeTypes.map(each => (
                                            <SelectItem key={each} value={each.toLowerCase()}>{each}</SelectItem>

                                        ))}

                                    </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                        control={form.control}
                        name="storeName"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Store Name</FormLabel>
                                <FormControl>
                                    <Input placeholder="Store Name" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="storeLogo"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Store Logo</FormLabel>
                                <FormControl>
                                    <div className="flex flex-col items-center gap-2">
                                        <label className="w-full h-40 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer bg-gray-50 hover:bg-gray-100 transition">
                                            {storeLogoPreview ? (
                                                <img src={storeLogoPreview} alt="Store Logo Preview" className="h-28 object-contain" />
                                            ) : (
                                                <span className="text-gray-400">Click to upload logo</span>
                                            )}
                                            <Input type="file" accept="image/*" className="hidden" onChange={e => handleFileChange(e, setStoreLogoPreview, field.onChange)} />
                                        </label>
                                    </div>
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                        control={form.control}
                        name="storeBanner"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Store Banner</FormLabel>
                                <FormControl>
                                    <div className="flex flex-col items-center gap-2">
                                        <label className="w-full h-40 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer bg-gray-50 hover:bg-gray-100 transition">
                                            {storeBannerPreview ? (
                                                <img src={storeBannerPreview} alt="Store Banner Preview" className="h-28 object-contain" />
                                            ) : (
                                                <span className="text-gray-400">Click to upload banner</span>
                                            )}
                                            <Input type="file" accept="image/*" className="hidden" onChange={e => handleFileChange(e, setStoreBannerPreview, field.onChange)} />
                                        </label>
                                    </div>
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="contactPerson"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Contact Person</FormLabel>
                                <FormControl>
                                    <Input placeholder="Contact Person" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Phone Number</FormLabel>
                                <FormControl>
                                    <Input placeholder="Phone Number" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="idNumber"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>ID Number</FormLabel>
                                <FormControl>
                                    <Input placeholder="ID Number" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                        control={form.control}
                        name="idPhotoFront"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>ID Photo (Front)</FormLabel>
                                <FormControl>
                                    <div className="flex flex-col items-center gap-2">
                                        <label className="w-full h-40 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer bg-gray-50 hover:bg-gray-100 transition">
                                            {idPhotoFrontPreview ? (
                                                <img src={idPhotoFrontPreview} alt="ID Front Preview" className="h-28 object-contain" />
                                            ) : (
                                                <span className="text-gray-400">Click to upload front</span>
                                            )}
                                            <Input type="file" accept="image/*" className="hidden" onChange={e => handleFileChange(e, setIdPhotoFrontPreview, field.onChange)} />
                                        </label>
                                    </div>
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="idPhotoBack"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>ID Photo (Back)</FormLabel>
                                <FormControl>
                                    <div className="flex flex-col items-center gap-2">
                                        <label className="w-full h-40 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer bg-gray-50 hover:bg-gray-100 transition">
                                            {idPhotoBackPreview ? (
                                                <img src={idPhotoBackPreview} alt="ID Back Preview" className="h-28 object-contain" />
                                            ) : (
                                                <span className="text-gray-400">Click to upload back</span>
                                            )}
                                            <Input type="file" accept="image/*" className="hidden" onChange={e => handleFileChange(e, setIdPhotoBackPreview, field.onChange)} />
                                        </label>
                                    </div>
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>

                <FormField
                    control={form.control}
                    name="invitationCode"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Invitation Code (optional)</FormLabel>
                            <FormControl>
                                <Input placeholder="Invitation Code" {...field} />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>
                                Description
                                <Button
                                    type="button"
                                    size="sm"
                                    variant="ghost"
                                    className="ml-2 px-2 py-0"
                                    onClick={handleAutoGenerateDescription}
                                    title="Auto-generate description"
                                >
                                    <Sparkles className="h-4 w-4 text-blue-500" />
                                </Button>
                            </FormLabel>
                            <FormControl>
                                <Textarea placeholder="Shop description" {...field} />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="address"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Address</FormLabel>
                            <FormControl>
                                <Textarea placeholder="Address" {...field} />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <Button type="submit" className="w-full">
                    {loading ? <ButtonLoading text="Submitting..." /> : "Submit Application"}
                </Button>
            </form>
        </Form>
    )
}